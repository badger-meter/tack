#!/bin/bash -ex

function usage { cat <<EOF

USAGE: $0 output-dir name key_file bastion_ip user-name
  example: $0 test-cfssl test .keypair/k8s-testing.pem 55.11.22.33 k8s-admin

EOF

  exit 1
}

OUTDIR=$1
[ -z "$OUTDIR" ] && usage

NAME=$2
[ -z "${NAME}" ] && usage

KEY_FILE=$3
[ -z "${KEY_FILE}" ] && usage

BASTION_IP=$4
[ -z "${BASTION_IP}" ] && usage

USER=$5
[ -z "${USER}" ] && usage


function error {
  echo "âœ— Error on line $1"'!'
  exit 1
}
trap 'error ${LINENO}' ERR

# setup port forwarding
#
ssh-keyscan ${BASTION_IP}
#ssh -o StrictHostKeyChecking=no -i ${KEY_FILE} -nNT -L 8888:pki.${NAME}:8888 core@${BASTION_IP} &
ssh -o StrictHostKeyChecking=no -nNT -L 8888:pki.${NAME}.k8s:8888 ${AWS_USERNAME}@${BASTION_IP} &
SSH_PID=$!

function finish {
  [ -z ${SSH_PID} ] || kill ${SSH_PID}
}
trap finish EXIT

# test cfssl connection
#
sleep 5.2 && curl -d '{"label":"primary"}' http://localhost:8888/api/v1/cfssl/info

DNS1="kubernetes"
DNS2="kubernetes.default"
DNS3="kubernetes.default.svc"
DNS4="kubernetes.default.svc.cluster.local"
DEFAULT_HOSTS="$DNS1,$DNS2,$DNS3,$DNS4,127.0.0.1"


function csr {
  cat <<EOF
{"CN":"$1","hosts":[""],"key":{"algo":"rsa","size":2048}}
EOF
}


function generate {

  CN=$1
  PROFILE=$2
  HOSTS=$3

  echo "$(csr $CN)" \
    | cfssl gencert \
      -remote=localhost:8888 \
      -profile=$PROFILE \
      -hostname="$HOSTS" - \
    | cfssljson -bare $CN

  chmod 0644 $CN.pem ${CN}-key.pem

}

mkdir -p $OUTDIR && cd $OUTDIR

generate $USER client-server "${DEFAULT_HOSTS},*.*.compute.internal,*.ec2.internal"
